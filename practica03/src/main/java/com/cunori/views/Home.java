/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.cunori.views;

import com.cunori.interfaces.Lambdas;
import com.cunori.models.Estudiante;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;
import java.util.TreeSet;
import javax.swing.DefaultListModel;

/**
 *
 * @author hendrick
 */
public class Home extends javax.swing.JFrame {

    private final DefaultListModel modelo;

    private final List<Estudiante> estudiantes_al;
    private final LinkedList<Estudiante> estudiantes_ll;

    private final HashSet<Estudiante> estudiantes_hs;
    private final TreeSet<Estudiante> estudiantes_ts;
    private final LinkedHashSet<Estudiante> estudiantes_lhs;

    private final HashMap<Integer, Estudiante> estudiantes_hm;
    private final TreeMap<Integer, Estudiante> estudiantes_tm;
    private final LinkedHashMap<Integer, Estudiante> estudiantes_lhm;

    private int cont = 0;

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        modelo = new DefaultListModel();
        listElementos.setModel(modelo);

        //mutables, repetidos
        this.estudiantes_al = new ArrayList<>();
        this.estudiantes_ll = new LinkedList<>();

        //mutables, No repetidos
        this.estudiantes_hs = new HashSet<>();
        this.estudiantes_ts = new TreeSet<>();
        this.estudiantes_lhs = new LinkedHashSet<>();

        //mutables, No repetidos
        this.estudiantes_hm = new HashMap<>();
        this.estudiantes_tm = new TreeMap<>();
        this.estudiantes_lhm = new LinkedHashMap<>();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnSeleccionar = new javax.swing.JButton();
        cbListas = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listElementos = new javax.swing.JList<>();
        btnAñadir = new javax.swing.JButton();
        btnLambdas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSeleccionar.setText("Seleccionar");
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });

        cbListas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "List - ArrayList", "List - LinkedList", "Set - HashSet", "Set - TreeSet", "Set - LinkedHashSet", "Map - HashMap", "Map - TreeMap", "Map - LinkedHashMap" }));

        listElementos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listElementos);

        btnAñadir.setText("Añadir");
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });

        btnLambdas.setText("Lambdas");
        btnLambdas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLambdasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbListas, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLambdas)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbListas, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeleccionar)
                    .addComponent(btnAñadir)
                    .addComponent(btnLambdas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        modelo.clear();
        switch (cbListas.getSelectedItem().toString()) {
            case "List - ArrayList":
                for (Estudiante estudiante : estudiantes_al) {
                    modelo.addElement(estudiante.toString());
                }
                break;
            case "List - LinkedList":
                for (Estudiante estudiante : estudiantes_ll) {
                    modelo.addElement(estudiante.toString());
                }
                break;
            case "Set - HashSet":
                for (Estudiante estudiante : estudiantes_hs) {
                    modelo.addElement(estudiante.toString());
                }
                break;
            case "Set - TreeSet":
                for (Estudiante estudiante : estudiantes_ts) {
                    modelo.addElement(estudiante.toString());
                }
                break;
            case "Set - LinkedHashSet":
                for (Estudiante estudiante : estudiantes_lhs) {
                    modelo.addElement(estudiante.toString());
                }
                break;
            case "Map - HashMap":
                for (Map.Entry<Integer, Estudiante> entry : estudiantes_hm.entrySet()) {
                    modelo.addElement("key: " + entry.getKey() + "  value: " + entry.getValue().toString());
                }
                break;
            case "Map - TreeMap":
                for (Map.Entry<Integer, Estudiante> entry : estudiantes_tm.entrySet()) {
                    modelo.addElement("key: " + entry.getKey() + "  value: " + entry.getValue().toString());
                }
                break;
            case "Map - LinkedHashMap":
                for (Map.Entry<Integer, Estudiante> entry : estudiantes_lhm.entrySet()) {
                    modelo.addElement("key: " + entry.getKey() + "  value: " + entry.getValue().toString());
                }
                break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_btnSeleccionarActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
        Random random = new Random();
        try {
            switch (cbListas.getSelectedItem().toString()) {
                case "List - ArrayList":
                    estudiantes_al.add(new Estudiante(random.nextInt(1000000) + 100000, "Estudiante " + cont, true));
                    break;
                case "List - LinkedList":
                    estudiantes_ll.add(new Estudiante(random.nextInt(1000000) + 100000, "Estudiante " + cont, true));
                    break;
                case "Set - HashSet":
                    estudiantes_hs.add(new Estudiante(random.nextInt(1000000) + 100000, "Estudiante " + cont, true));
                    break;
                case "Set - TreeSet":
                    estudiantes_ts.add(new Estudiante(random.nextInt(1000000) + 100000, "Estudiante " + cont, true));
                    break;
                case "Set - LinkedHashSet":
                    estudiantes_lhs.add(new Estudiante(random.nextInt(1000000) + 100000, "Estudiante " + cont, true));
                    break;
                case "Map - HashMap":
                    estudiantes_hm.put(random.nextInt(1000000) + 100000, new Estudiante(random.nextInt(1000000) + 100000, "Estudiante " + cont, true));
                    break;
                case "Map - TreeMap":
                    estudiantes_tm.put(random.nextInt(1000000) + 100000, new Estudiante(random.nextInt(1000000) + 100000, "Estudiante " + cont, true));
                    break;
                case "Map - LinkedHashMap":
                    estudiantes_lhm.put(random.nextInt(1000000) + 100000, new Estudiante(random.nextInt(1000000) + 100000, "Estudiante " + cont, true));
                    break;
                default:
                    System.out.println("Sin elección");
                    throw new AssertionError();
            }
            cont++;
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_btnAñadirActionPerformed

    private void btnLambdasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLambdasActionPerformed
        /**
         * Divide una expresión lambda en dos partes:
         *
         * El lado izquierdo especifica los parámetros requeridos por la
         * expresión lambda. En el lado derecho está el cuerpo lambda, que
         * especifica las acciones de la expresión lambda.
         */
        // ()->345.3
        // double miMetodo(){ return 345.3 }

        //()->Math.random() * 100
        //(n)-> 2 / n
        //(n)->(n%2)==0
        Lambdas l;
        l = () -> 25.52;
        System.out.println(l.geValor());

        /**
         * Los Streams en java son un nuevo modelo de datos que nos permite
         * tratar las colecciones como si de etapas de un proceso ETL (“Extract
         * Transform and Load”) se tratara. Esto nos permite utilizar las
         * funciones Map y Reduce tan comunes en esos procesos, especialmente en
         * la etapa de transformación.
         */
        //estudiantes_al.forEach(e -> System.out.println(e.toString()));
        //estudiantes_al.forEach(System.out::println);
        //estudiantes_al.stream().forEach(System.out::println);
        estudiantes_al.stream()
                .filter(x -> x.getCarne() >= 200000)
                .map(x -> x.getNombre() + " actualizado")
                .sorted()
                .forEach(System.out::println);
    }//GEN-LAST:event_btnLambdasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnLambdas;
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JComboBox<String> cbListas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listElementos;
    // End of variables declaration//GEN-END:variables
}
